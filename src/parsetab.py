
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocTOKENrightASSIGNleftORleftANDnonassocRELOPleftPLUSMINUSleftTIMESDIVIDErightNOTrightUMINUSleftDOTleftLPARENRPARENnonassocELSEAND ASSIGN COLON COMMA DIVIDE DOT ELSE EVENT FLOAT FN ID IF INT LBRACE LPAREN MINUS NOT OR PLUS RBRACE RELOP RETURN RPAREN SEMI STRING TIMES TYPE WHILEprogram : program_part_listempty :program_part_list : program_part\n                       | program_part program_part_listprogram_part : event\n                  | function\n                  event : EVENT STRING LBRACE statement_list RBRACEstatement_list : statement\n                    | statement_list statementstatement : if_statement\n               | while_statement\n               | return_statement\n               | comp_statement\n               | expression SEMI\n               | empty\n  if_statement : IF LPAREN expression RPAREN statement\n                  | IF LPAREN expression RPAREN statement ELSE statement\n  while_statement : WHILE LPAREN expression RPAREN statementreturn_statement : RETURN expression SEMIcomp_statement : LBRACE statement_list RBRACEexpression : TYPE ID ASSIGN expression\n                | ID ASSIGN expression\n                | expression PLUS expression\n                | expression MINUS expression\n                | expression TIMES expression\n                | expression DIVIDE expression\n                | expression RELOP expression\n                | expression AND expression\n                | expression OR expression\n                | expression ASSIGN expression\n                | LPAREN expression RPAREN\n                | NOT expression\n                | MINUS expression %prec UMINUS\n                | ID LPAREN RPAREN\n                | ID LPAREN args RPAREN\n                | expression DOT ID\n                | ID %prec TOKEN\n                | INT\n                | FLOAT\n                | STRING\n                | json\n  args : expression\n          | args COMMA expressionjson : LBRACE json_list RBRACEjson_list : json_pair\n               | json_pair COMMA json_listjson_pair : STRING COLON expressionfunction : FN ID LPAREN RPAREN comp_statement\n              | FN ID LPAREN var_list RPAREN comp_statement\n  var_list : TYPE ID\n              | var_list COMMA TYPE ID\n  '
    
_lr_action_items = {'EVENT':([0,3,4,5,41,63,68,91,],[6,6,-5,-6,-7,-48,-20,-49,]),'FN':([0,3,4,5,41,63,68,91,],[7,7,-5,-6,-7,-48,-20,-49,]),'$end':([1,2,3,4,5,8,41,63,68,91,],[0,-1,-3,-5,-6,-4,-7,-48,-20,-49,]),'STRING':([6,11,14,15,16,17,18,19,20,22,24,26,29,30,37,42,43,44,45,46,47,48,49,50,51,53,55,56,59,60,64,68,70,71,85,86,95,96,99,101,102,104,105,],[9,13,40,13,-8,-10,-11,-12,-13,-15,13,13,13,13,13,-9,-14,13,13,13,13,13,13,13,13,13,83,13,13,13,13,-20,83,13,-19,13,13,13,13,-16,-18,13,-17,]),'ID':([7,11,14,15,16,17,18,19,20,22,24,26,27,29,30,36,37,42,43,44,45,46,47,48,49,50,51,52,53,56,59,60,64,68,71,85,86,92,95,96,99,101,102,104,105,],[10,28,28,28,-8,-10,-11,-12,-13,-15,28,28,58,28,28,67,28,-9,-14,28,28,28,28,28,28,28,28,80,28,28,28,28,28,-20,28,-19,28,100,28,28,28,-16,-18,28,-17,]),'LBRACE':([9,11,14,15,16,17,18,19,20,22,24,26,29,30,34,37,42,43,44,45,46,47,48,49,50,51,53,56,59,60,64,65,68,71,85,86,95,96,99,101,102,104,105,],[11,14,14,14,-8,-10,-11,-12,-13,-15,55,55,55,55,64,14,-9,-14,55,55,55,55,55,55,55,55,55,55,55,55,14,64,-20,55,-19,55,14,14,55,-16,-18,14,-17,]),'LPAREN':([10,11,14,15,16,17,18,19,20,22,23,24,25,26,28,29,30,37,42,43,44,45,46,47,48,49,50,51,53,56,59,60,64,68,71,85,86,95,96,99,101,102,104,105,],[12,24,24,24,-8,-10,-11,-12,-13,-15,53,24,56,24,60,24,24,24,-9,-14,24,24,24,24,24,24,24,24,24,24,24,24,24,-20,24,-19,24,24,24,24,-16,-18,24,-17,]),'IF':([11,14,15,16,17,18,19,20,22,37,42,43,64,68,85,95,96,101,102,104,105,],[23,23,23,-8,-10,-11,-12,-13,-15,23,-9,-14,23,-20,-19,23,23,-16,-18,23,-17,]),'WHILE':([11,14,15,16,17,18,19,20,22,37,42,43,64,68,85,95,96,101,102,104,105,],[25,25,25,-8,-10,-11,-12,-13,-15,25,-9,-14,25,-20,-19,25,25,-16,-18,25,-17,]),'RETURN':([11,14,15,16,17,18,19,20,22,37,42,43,64,68,85,95,96,101,102,104,105,],[26,26,26,-8,-10,-11,-12,-13,-15,26,-9,-14,26,-20,-19,26,26,-16,-18,26,-17,]),'TYPE':([11,12,14,15,16,17,18,19,20,22,24,26,29,30,37,42,43,44,45,46,47,48,49,50,51,53,56,59,60,64,66,68,71,85,86,95,96,99,101,102,104,105,],[27,36,27,27,-8,-10,-11,-12,-13,-15,27,27,27,27,27,-9,-14,27,27,27,27,27,27,27,27,27,27,27,27,27,92,-20,27,-19,27,27,27,27,-16,-18,27,-17,]),'NOT':([11,14,15,16,17,18,19,20,22,24,26,29,30,37,42,43,44,45,46,47,48,49,50,51,53,56,59,60,64,68,71,85,86,95,96,99,101,102,104,105,],[30,30,30,-8,-10,-11,-12,-13,-15,30,30,30,30,30,-9,-14,30,30,30,30,30,30,30,30,30,30,30,30,30,-20,30,-19,30,30,30,30,-16,-18,30,-17,]),'MINUS':([11,13,14,15,16,17,18,19,20,21,22,24,26,28,29,30,31,32,33,37,40,42,43,44,45,46,47,48,49,50,51,53,54,56,57,59,60,61,62,64,68,69,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,90,94,95,96,97,98,99,101,102,103,104,105,],[29,-40,29,29,-8,-10,-11,-12,-13,45,-15,29,29,-37,29,29,-38,-39,-41,29,-40,-9,-14,29,29,29,29,29,29,29,29,29,45,29,45,29,29,-33,-32,29,-20,-44,29,-23,-24,-25,-26,45,45,45,45,-36,45,-31,45,-19,29,45,-34,45,45,29,29,45,-35,29,-16,-18,45,29,-17,]),'INT':([11,14,15,16,17,18,19,20,22,24,26,29,30,37,42,43,44,45,46,47,48,49,50,51,53,56,59,60,64,68,71,85,86,95,96,99,101,102,104,105,],[31,31,31,-8,-10,-11,-12,-13,-15,31,31,31,31,31,-9,-14,31,31,31,31,31,31,31,31,31,31,31,31,31,-20,31,-19,31,31,31,31,-16,-18,31,-17,]),'FLOAT':([11,14,15,16,17,18,19,20,22,24,26,29,30,37,42,43,44,45,46,47,48,49,50,51,53,56,59,60,64,68,71,85,86,95,96,99,101,102,104,105,],[32,32,32,-8,-10,-11,-12,-13,-15,32,32,32,32,32,-9,-14,32,32,32,32,32,32,32,32,32,32,32,32,32,-20,32,-19,32,32,32,32,-16,-18,32,-17,]),'RBRACE':([11,13,14,15,16,17,18,19,20,22,28,31,32,33,37,38,39,42,43,61,62,64,68,69,72,73,74,75,76,77,78,79,80,82,85,87,88,93,94,95,96,97,98,101,102,104,105,],[-2,-40,-2,41,-8,-10,-11,-12,-13,-15,-37,-38,-39,-41,68,69,-45,-9,-14,-33,-32,-2,-20,-44,-23,-24,-25,-26,-27,-28,-29,-30,-36,-31,-19,-22,-34,-46,-47,-2,-2,-21,-35,-16,-18,-2,-17,]),'RPAREN':([12,13,28,31,32,33,35,54,60,61,62,67,69,72,73,74,75,76,77,78,79,80,81,82,84,87,88,89,90,97,98,100,103,],[34,-40,-37,-38,-39,-41,65,82,88,-33,-32,-50,-44,-23,-24,-25,-26,-27,-28,-29,-30,-36,95,-31,96,-22,-34,98,-42,-21,-35,-51,-43,]),'SEMI':([13,21,28,31,32,33,40,57,61,62,69,72,73,74,75,76,77,78,79,80,82,87,88,97,98,],[-40,43,-37,-38,-39,-41,-40,85,-33,-32,-44,-23,-24,-25,-26,-27,-28,-29,-30,-36,-31,-22,-34,-21,-35,]),'PLUS':([13,21,28,31,32,33,40,54,57,61,62,69,72,73,74,75,76,77,78,79,80,81,82,84,87,88,90,94,97,98,103,],[-40,44,-37,-38,-39,-41,-40,44,44,-33,-32,-44,-23,-24,-25,-26,44,44,44,44,-36,44,-31,44,44,-34,44,44,44,-35,44,]),'TIMES':([13,21,28,31,32,33,40,54,57,61,62,69,72,73,74,75,76,77,78,79,80,81,82,84,87,88,90,94,97,98,103,],[-40,46,-37,-38,-39,-41,-40,46,46,-33,-32,-44,46,46,-25,-26,46,46,46,46,-36,46,-31,46,46,-34,46,46,46,-35,46,]),'DIVIDE':([13,21,28,31,32,33,40,54,57,61,62,69,72,73,74,75,76,77,78,79,80,81,82,84,87,88,90,94,97,98,103,],[-40,47,-37,-38,-39,-41,-40,47,47,-33,-32,-44,47,47,-25,-26,47,47,47,47,-36,47,-31,47,47,-34,47,47,47,-35,47,]),'RELOP':([13,21,28,31,32,33,40,54,57,61,62,69,72,73,74,75,76,77,78,79,80,81,82,84,87,88,90,94,97,98,103,],[-40,48,-37,-38,-39,-41,-40,48,48,-33,-32,-44,-23,-24,-25,-26,None,48,48,48,-36,48,-31,48,48,-34,48,48,48,-35,48,]),'AND':([13,21,28,31,32,33,40,54,57,61,62,69,72,73,74,75,76,77,78,79,80,81,82,84,87,88,90,94,97,98,103,],[-40,49,-37,-38,-39,-41,-40,49,49,-33,-32,-44,-23,-24,-25,-26,-27,-28,49,49,-36,49,-31,49,49,-34,49,49,49,-35,49,]),'OR':([13,21,28,31,32,33,40,54,57,61,62,69,72,73,74,75,76,77,78,79,80,81,82,84,87,88,90,94,97,98,103,],[-40,50,-37,-38,-39,-41,-40,50,50,-33,-32,-44,-23,-24,-25,-26,-27,-28,-29,50,-36,50,-31,50,50,-34,50,50,50,-35,50,]),'ASSIGN':([13,21,28,31,32,33,40,54,57,58,61,62,69,72,73,74,75,76,77,78,79,80,81,82,84,87,88,90,94,97,98,103,],[-40,51,59,-38,-39,-41,-40,51,51,86,-33,-32,-44,-23,-24,-25,-26,-27,-28,-29,51,-36,51,-31,51,51,-34,51,51,51,-35,51,]),'DOT':([13,21,28,31,32,33,40,54,57,61,62,69,72,73,74,75,76,77,78,79,80,81,82,84,87,88,90,94,97,98,103,],[-40,52,-37,-38,-39,-41,-40,52,52,52,52,-44,52,52,52,52,52,52,52,52,-36,52,-31,52,52,-34,52,52,52,-35,52,]),'COMMA':([13,28,31,32,33,35,39,61,62,67,69,72,73,74,75,76,77,78,79,80,82,87,88,89,90,94,97,98,100,103,],[-40,-37,-38,-39,-41,66,70,-33,-32,-50,-44,-23,-24,-25,-26,-27,-28,-29,-30,-36,-31,-22,-34,99,-42,-47,-21,-35,-51,-43,]),'ELSE':([17,18,19,20,22,43,68,85,95,96,101,102,104,105,],[-10,-11,-12,-13,-15,-14,-20,-19,-2,-2,104,-18,-2,-17,]),'COLON':([40,83,],[71,71,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_part_list':([0,3,],[2,8,]),'program_part':([0,3,],[3,3,]),'event':([0,3,],[4,4,]),'function':([0,3,],[5,5,]),'statement_list':([11,14,64,],[15,37,37,]),'statement':([11,14,15,37,64,95,96,104,],[16,16,42,42,16,101,102,105,]),'if_statement':([11,14,15,37,64,95,96,104,],[17,17,17,17,17,17,17,17,]),'while_statement':([11,14,15,37,64,95,96,104,],[18,18,18,18,18,18,18,18,]),'return_statement':([11,14,15,37,64,95,96,104,],[19,19,19,19,19,19,19,19,]),'comp_statement':([11,14,15,34,37,64,65,95,96,104,],[20,20,20,63,20,20,91,20,20,20,]),'expression':([11,14,15,24,26,29,30,37,44,45,46,47,48,49,50,51,53,56,59,60,64,71,86,95,96,99,104,],[21,21,21,54,57,61,62,21,72,73,74,75,76,77,78,79,81,84,87,90,21,94,97,21,21,103,21,]),'empty':([11,14,15,37,64,95,96,104,],[22,22,22,22,22,22,22,22,]),'json':([11,14,15,24,26,29,30,37,44,45,46,47,48,49,50,51,53,56,59,60,64,71,86,95,96,99,104,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'var_list':([12,],[35,]),'json_list':([14,55,70,],[38,38,93,]),'json_pair':([14,55,70,],[39,39,39,]),'args':([60,],[89,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program_part_list','program',1,'p_program','parser.py',27),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',35),
  ('program_part_list -> program_part','program_part_list',1,'p_program_part_list','parser.py',41),
  ('program_part_list -> program_part program_part_list','program_part_list',2,'p_program_part_list','parser.py',42),
  ('program_part -> event','program_part',1,'p_program_part','parser.py',51),
  ('program_part -> function','program_part',1,'p_program_part','parser.py',52),
  ('event -> EVENT STRING LBRACE statement_list RBRACE','event',5,'p_event','parser.py',58),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',64),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',65),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',74),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',75),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',76),
  ('statement -> comp_statement','statement',1,'p_statement','parser.py',77),
  ('statement -> expression SEMI','statement',2,'p_statement','parser.py',78),
  ('statement -> empty','statement',1,'p_statement','parser.py',79),
  ('if_statement -> IF LPAREN expression RPAREN statement','if_statement',5,'p_if_statement','parser.py',86),
  ('if_statement -> IF LPAREN expression RPAREN statement ELSE statement','if_statement',7,'p_if_statement','parser.py',87),
  ('while_statement -> WHILE LPAREN expression RPAREN statement','while_statement',5,'p_while_statement','parser.py',97),
  ('return_statement -> RETURN expression SEMI','return_statement',3,'p_return_statement','parser.py',103),
  ('comp_statement -> LBRACE statement_list RBRACE','comp_statement',3,'p_comp_statement','parser.py',109),
  ('expression -> TYPE ID ASSIGN expression','expression',4,'p_expression','parser.py',115),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression','parser.py',116),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser.py',117),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser.py',118),
  ('expression -> expression TIMES expression','expression',3,'p_expression','parser.py',119),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','parser.py',120),
  ('expression -> expression RELOP expression','expression',3,'p_expression','parser.py',121),
  ('expression -> expression AND expression','expression',3,'p_expression','parser.py',122),
  ('expression -> expression OR expression','expression',3,'p_expression','parser.py',123),
  ('expression -> expression ASSIGN expression','expression',3,'p_expression','parser.py',124),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','parser.py',125),
  ('expression -> NOT expression','expression',2,'p_expression','parser.py',126),
  ('expression -> MINUS expression','expression',2,'p_expression','parser.py',127),
  ('expression -> ID LPAREN RPAREN','expression',3,'p_expression','parser.py',128),
  ('expression -> ID LPAREN args RPAREN','expression',4,'p_expression','parser.py',129),
  ('expression -> expression DOT ID','expression',3,'p_expression','parser.py',130),
  ('expression -> ID','expression',1,'p_expression','parser.py',131),
  ('expression -> INT','expression',1,'p_expression','parser.py',132),
  ('expression -> FLOAT','expression',1,'p_expression','parser.py',133),
  ('expression -> STRING','expression',1,'p_expression','parser.py',134),
  ('expression -> json','expression',1,'p_expression','parser.py',135),
  ('args -> expression','args',1,'p_args','parser.py',153),
  ('args -> args COMMA expression','args',3,'p_args','parser.py',154),
  ('json -> LBRACE json_list RBRACE','json',3,'p_json','parser.py',163),
  ('json_list -> json_pair','json_list',1,'p_json_list','parser.py',169),
  ('json_list -> json_pair COMMA json_list','json_list',3,'p_json_list','parser.py',170),
  ('json_pair -> STRING COLON expression','json_pair',3,'p_json_pair','parser.py',179),
  ('function -> FN ID LPAREN RPAREN comp_statement','function',5,'p_function','parser.py',185),
  ('function -> FN ID LPAREN var_list RPAREN comp_statement','function',6,'p_function','parser.py',186),
  ('var_list -> TYPE ID','var_list',2,'p_var_list','parser.py',198),
  ('var_list -> var_list COMMA TYPE ID','var_list',4,'p_var_list','parser.py',199),
]
